#!/usr/bin/env ruby
# frozen_string_literal: true

require 'thor'
require 'faraday'
require_relative '../lib/llm_fixer/static_analysis_fixer'

class CLI < Thor
  desc 'fix [--additional-prompt TEXT | -a TEXT] COMMAND [ARGS...]', 'Static analysis errors are automatically fixed by LLM'
  
  def fix(*args)
    %w[LLM_API_BASE LLM_MODEL LLM_API_KEY].each do |key|
      unless ENV[key]
        puts "#{key} is not set"
        exit 1
      end
    end
    
    additional_prompt = nil
    command_args = args.dup
    
    if command_args[0] == '--additional-prompt' || command_args[0] == '-a'
      command_args.shift
      additional_prompt = command_args.shift
      if additional_prompt.nil? || additional_prompt.empty?
        puts 'ERROR: Additional prompt option requires a value'
        exit 1
      end
    end
    
    puts "args: #{command_args.inspect}"
    if command_args.empty?
      puts 'Usage: llm_fixer fix [--additional-prompt TEXT | -a TEXT] COMMAND [ARGS...]'
      exit 1
    end

    puts "command: #{command_args.join(' ')}"
    puts "additional prompt: #{additional_prompt}" if additional_prompt
    
    fixer = LlmFixer::StaticAnalysisFixer.new(ENV.fetch('LLM_API_KEY', nil))
    success = fixer.fix_file(command_args, additional_prompt)
    exit(1) unless success
  rescue Faraday::Error => e
    puts "Error: #{e.message}\n#{e.response[:body]}"
    exit 1
  end

  def self.exit_on_failure?
    true
  end
end

puts 'start llm_fixer'
CLI.start(ARGV)
